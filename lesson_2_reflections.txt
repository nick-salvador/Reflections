What happens when you initialize a repository? Why do you need to do it?

Initializing a repository adds a .git folder to the given directory. It is the first step to starting to utilize version control for the files in that directory. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area acts as a middle layer between the working directory and the repository. It gives users a greater level of control over what exactly gets committed to their repository. As mentioned in the videos, this is advantageous because users can add one logical change per commit by taking advantage of the staging area.

How can you use the staging area to make sure you have one commit per logical change?

By running the commands git diff and git diff --staged you can view the differences between the files in your working directory, staging area, and latest commit. This allows you to manage exactly which changes are committed. Specifically, by running git diff, you can view the differences between files in your staging area and your working directory. You can ennsure that there is only one logical change between the two.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

One example I can think of is on a recent project I was working on. I was trying to figure out the best way to retrieve a picture from a database so I tried multiple ways. One way was by saving the entire picture in the database and another way was storing the URI of the database and the last was through storing the ParcelFileDescriptor of the picture. Using branches could've allowed to retain the code from the different experimental versions and manage them efficiently.