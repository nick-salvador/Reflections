When would you want to use a remote repository rather than keeping all your work local?

A remote repository is beneficial when you are working across multiple machines or collaborating with other developers who need to access your code.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

This ensures that you aren't constantly working with new code that is being uploaded by potential collaborators. If you are working on one particular feature and a colleague is making edits to something else, it makes sense to wait to pull the changes that he pushed only when you are finished making your changes as well.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A branch is an evolutionary path of your file/project. You can use multiple branches to change your project in different ways while keeping things separate. A clone is a copy of a GitHub repository that exists on your local machine. A fork is similar, the difference being that a fork is a generated by GitHub, gets copied directly to your GitHub account, and links back to the original repository. 

What is the benefit of having a copy of the last known state of the remote stored locally?

It helps you understand what may conflict with your current code and also ease the process of merging those different copies.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I may try a different version control system such as google drive in order to collaborate with others. The benefit being that my content would still be stored on the cloud and could be accessed by multiple people simultaneously. However, a system like google drive is not optimized for code and I would run into problems when attempting to merge the different changes made by my peers.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

This ensures that the master branch always stays at production quality. Any changes that are being considered must first be evaluated in a separate branch before being added directly to the master. This way the master stays stable. The only con to this approach is that changes take longer to reach that master branch than they would if code was changed directly.


